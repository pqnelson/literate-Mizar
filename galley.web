\input{labels2}
\input macros
\def\title{Galley Proof}

\setchapno{22}
%\secno=11
%\chapno=22

@ The Mizar program is released under the GNU license. So let us place
this license in one place.

@f unit==program
@f interface==const
@f implementation==const
@f uses==const
@f object==record
@f constructor==function
@f destructor==function
@f shr==div
@d othercases == others: {default for cases not listed explicitly}
@d endcases == @+end {follows the default case in an extended |case| statement}
@f othercases == else
@f endcases == end
@f private == else
@d disable_io_checking == @{@&$I-@}
@d enable_io_checking == @{@&$I+@}
@d without_io_checking(#) == disable_io_checking; #; enable_io_checking
@d mdebug == @{@&$IFDEF MDEBUG@}
@d end_mdebug == @{@&$ENDIF@}
@f mdebug == begin
@f end_mdebug == end
@f result == nil

@

@<GNU License@>=
{
   This file is part of the Mizar system.
   Copyright (c) Association of Mizar Users.
   License terms: GNU General Public License Version 3 or any later version.
}

@ Bugs.

\bug In \\{extItemObj.FinishFunctorPattern} (\section\xref{extItemObj.FinishFunctorPattern}),
the default case does not add a new format to the \\{gFormatsColl} dictionary.
\bug In \\{CreateArgs} (\section\xref{CreateArgs}) in \texttt{parseraddition.pas}, when |aBase <= 0|, this
will set |TermNbr| to a negative number.
\bug In the Subexpression class, there is duplicate code
(\section\xref{extSubexpObj.CompleteAttributeArguments}) ---
the \\{CompleteAttributeArguments} and \\{FinishAttributeArguments}
are identical, but only the latter is consistent with the naming
conventions for the Parser. Or (probably more likely) I am misunderstanding the naming conventions?
\bug In \\{CompleteArgument}
(\section\xref{CompleteArgument:parser.pas}), we should also test
that \\{fParenthCnt} is positive, shouldn't we?
\bug The \\{CreateSubexpression} method (\section\xref{extExpressionObj.CreateSubexpression}),
for extended expression objects, may result in a memory leak
when |gSubexpPtr <> nil| --- that is to say, if \\{KillSubexpression}
has not been invoked prior to \\{CreateSubexpression}.
\bug Misnamed variable: \\{gIdenifyEqLociList} should be \\{gIdentifyEqLociList}
(i.e., ``idenify'' should be ``identify'' --- with a `t'). (This typo
has been corrected in the literate presentation of the code.)
\bug As discussed in (\section\xref{extItemObj.StartFixedVariables}),
there is a mismatch between the documentation and the Parser when it
comes to parsing loci declarations in a definition
block. The \texttt{syntax.txt} file is more restrictive than the
Parser, and should be updated to reflect the Parser.
\bug The \\{gSuchThat} global variable is never used anywhere (\section\xref{extItemObj.FinishFixedVariables})
\bug In \\{ATTSubexpression} (\section\xref{ATTSubexpression}), in the
|else| block when the conditional
|if lAttrExp or (aExpKind = exAdjectiveCluster)| is executed,
|aExpKind = exAdjectiveCluster| is never true (so there's no need for it).

@* [] Index.
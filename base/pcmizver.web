
@* [F] PC Mizar Version.
This is used to track the version of Mizar.

@<pcmizver.pas@>=
  @<GNU License@>
unit pcmizver;

interface @|@#

const  @<Constants for \texttt{pcmizver.pas}@>@;

@<Public functions for \texttt{pcmizver.pas}@>@;

implementation @|@#

@<Implementation for \texttt{pcmizver.pas}@>  @t\2@> @; @#

end.

@
Note the slight variant of terminology compared to semantic versioning
``Major.Minor.Patch'', Mizar uses ``Release.Version.Variant''. This
appears to be just a minor difference in vocabulary.

@<Constants for \texttt{pcmizver.pas}@>=
   PCMizarReleaseNbr = 8; @/
   PCMizarVersionNbr = 1; @/
   PCMizarVariantNbr = 14;

@ The current year could probably be determined from the \PASCAL/
system utilities, but it is hardcoded to 2025. The \\{CurrentYear} is
only used in one procedure in this module, so we could easily replace
it with (the possibly non-portable) |FormatDateTime('YYYY',Now)|.

@<Constants for \texttt{pcmizver.pas}@>=
   CurrentYear = 2025; @#

@ The directory separator for the file system supports Windows
and \UNIX/-like file systems. So Classic \macOS/ and \QNX/ users would
have to request this changed.

Note: it might be wiser, for Free \PASCAL/ users, to use the \href{https://www.freepascal.org/docs-html/rtl/system/directoryseparator.html}{\\{DirectorySeparator}}
constant from the \\{system} unit.

@<Constants for \texttt{pcmizver.pas}@>=
@{@&$IFDEF WIN32@}
  @! DirSeparator = '\'; @/
@{@&$ELSE@}
   DirSeparator = '/'; @/
@{@&$ENDIF@}

@ There are only four functions provided by this module.

\interface
@<Public functions for \texttt{pcmizver.pas}@>=
function @? PCMizarVersionStr: string;
function @? VersionStr: string;
function @? PlatformNameStr: string;
function @? Copyright : string;
@ \endinterface
Their implementation is relativiely straightforward: just print the
appropriate constants to the screen.


@<Implementation for \texttt{pcmizver.pas}@>=
function Copyright : string;
var s:string;
begin
 Str(CurrentYear,s);
 Copyright:='Copyright (c) 1990-'+s+' Association of Mizar Users';
end;

@ @<Implementation for \texttt{pcmizver.pas}@>=
function  VersionStr: string;
 var lRel,lVer,lVar: string[2]; lStr:string;
begin
 Str(PCMizarReleaseNbr,lRel);
 Str(PCMizarVersionNbr,lVer);
 Str(PCMizarVariantNbr,lVar);
 if length(lVar) = 1 then lVar:='0'+lVar; @/
@{@&$IFDEF VERALPHA@} 
 lStr:='-alpha'; @/
@{@&$ELSE@}
 lStr:=''; @/
@{@&$ENDIF@} @/
 VersionStr:=lRel+'.'+lVer+'.'+lVar+lStr;
end;

@ There are a number of platforms supported, a surprisingly large
number. If we were to support more platforms (other \BSD/s, \BeOS/, \GNU/
Hurd, etc.), then we would need to update this function. To see what
platforms are predefined for FreePascal, consult:
\item{$\bullet$}\href{https://wiki.freepascal.org/Platform_defines}{\texttt{https://wiki.freepascal.org/Platform_defines}}

\noindent Ostensibly, we could extend the platform name string to
display ``generic \UNIX/'' (and even ``generic \BSD/''), as well as
``generic Windows''.


@<Implementation for \texttt{pcmizver.pas}@>=
function  PlatformNameStr: string;
var lStr: string;
begin
   lStr:=''; @#
   
   if_def(WIN32) lStr:=lStr+'Win32'; @+ end_if
   if_def(LINUX) lStr:=lStr+'Linux'; @+ end_if
   if_def(SOLARIS) lStr:=lStr+'Solaris'; @+ end_if
   if_def(FREEBSD) lStr:=lStr+'FreeBSD'; @+ end_if
   if_def(DARWIN) lStr:=lStr+'Darwin'; @+ end_if @#

   if_def(FPC) lStr:=lStr+'/FPC'; @+ end_if
   if_def(DELPHI) lStr:=lStr+'/Delphi'; @+ end_if @#

   PlatformNameStr:=lStr;
end;

@ The last function in the \texttt{pcmizver.pas} file provides a
string for the Mizar version.

@<Implementation for \texttt{pcmizver.pas}@>=
function  PCMizarVersionStr: string;
begin
 PCMizarVersionStr:='Mizar Ver. '+VersionStr;
end;
